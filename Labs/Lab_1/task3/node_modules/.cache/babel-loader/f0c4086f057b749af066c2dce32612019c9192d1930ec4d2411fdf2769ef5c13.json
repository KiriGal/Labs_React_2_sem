{"ast":null,"code":"var _jsxFileName = \"/Users/alinakravcuk/Desktop/React Projects and Examples/Labs/Lab_1/task3/src/Components/ChessBoard.jsx\";\nimport React from \"react\";\nimport \"./ChessBoard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = () => {\n  const renderCell = (row, col) => {\n    const isBlack = (row + col) % 2 === 1;\n    const notation = getCellNotation(row, col);\n    const cellColor = isBlack ? \"black\" : \"white\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `cell ${cellColor}`,\n      children: [col === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-notation\",\n        children: notation[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notation\",\n        children: notation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)]\n    }, `${row}-${col}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  };\n  const getCellNotation = (row, col) => {\n    const letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"];\n    const number = 8 - row;\n    const letter = letters[col];\n    return `${letter}${number}`;\n  };\n  const renderRow = row => {\n    const cells = [];\n    for (let col = 0; col < 8; col++) {\n      cells.push(renderCell(row, col));\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: cells\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  };\n  const renderChessboard = () => {\n    const rows = [];\n    for (let row = 0; row < 8; row++) {\n      rows.push(renderRow(row));\n    }\n    return rows;\n  };\n  const renderLeftNotations = () => {\n    const notations = [\"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"];\n    return notations.map((notation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-notation\",\n      children: notation\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-notations\",\n      children: renderLeftNotations()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), renderChessboard()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ChessBoard","renderCell","row","col","isBlack","notation","getCellNotation","cellColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","letters","number","letter","renderRow","cells","push","renderChessboard","rows","renderLeftNotations","notations","map","index","_c","$RefreshReg$"],"sources":["/Users/alinakravcuk/Desktop/React Projects and Examples/Labs/Lab_1/task3/src/Components/ChessBoard.jsx"],"sourcesContent":["import React from \"react\";\nimport \"./ChessBoard.css\";\n\nconst ChessBoard = () => {\n    const renderCell = (row, col) => {\n        const isBlack = (row + col) % 2 === 1;\n        const notation = getCellNotation(row, col);\n        const cellColor = isBlack ? \"black\" : \"white\";\n\n        return (\n            <div className={`cell ${cellColor}`} key={`${row}-${col}`}>\n                {col === 0 && <div className=\"left-notation\">{notation[1]}</div>}\n                <div className=\"notation\">{notation}</div>\n            </div>\n        );\n    };\n\n    const getCellNotation = (row, col) => {\n        const letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"];\n        const number = 8 - row;\n        const letter = letters[col];\n        return `${letter}${number}`;\n    };\n\n    const renderRow = (row) => {\n        const cells = [];\n        for (let col = 0; col < 8; col++) {\n            cells.push(renderCell(row, col));\n        }\n        return <div className=\"row\" key={row}>{cells}</div>;\n    };\n\n    const renderChessboard = () => {\n        const rows = [];\n        for (let row = 0; row < 8; row++) {\n            rows.push(renderRow(row));\n        }\n        return rows;\n    };\n\n    const renderLeftNotations = () => {\n        const notations = [\"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"];\n        return notations.map((notation, index) => (\n            <div className=\"left-notation\" key={index}>{notation}</div>\n        ));\n    };\n\n    return (\n        <div className=\"chessboard\">\n            <div className=\"left-notations\">{renderLeftNotations()}</div>\n            {renderChessboard()}\n        </div>\n    );\n};\n\nexport default ChessBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}