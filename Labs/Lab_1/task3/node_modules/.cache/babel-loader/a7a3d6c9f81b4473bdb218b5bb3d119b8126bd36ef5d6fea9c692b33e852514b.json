{"ast":null,"code":"var _jsxFileName = \"/Users/alinakravcuk/Desktop/React Projects and Examples/Labs/Lab_1/task3/src/Components/ChessBoard.jsx\";\nimport React from \"react\";\nimport \"./ChessBoardStyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = () => {\n  const renderCell = (row, col) => {\n    const isBlack = (row + col) % 2 === 1;\n    const cellColor = isBlack ? \"black\" : \"white\";\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      className: `cell ${cellColor}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this);\n  };\n  const renderRow = row => {\n    const cells = [];\n    for (let col = 0; col < 8; col++) {\n      cells.push(renderCell(row, col));\n    }\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      className: \"row\",\n      children: cells\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  };\n  const renderNotation = () => {\n    const letters = [\" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \" \"];\n    const cells = [];\n    for (let col = 0; col < 10; col++) {\n      cells.push( /*#__PURE__*/_jsxDEV(\"th\", {\n        className: `notation`,\n        children: letters[col]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 24\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      className: \"row-notatian\",\n      children: cells\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  };\n  const renderChessboard = () => {\n    const rows = [];\n    rows.push(renderNotation());\n    for (let row = 0; row < 8; row++) {\n      rows.push(renderRow(row));\n    }\n    rows.push(renderNotation());\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"chessboard\",\n      children: renderChessboard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ChessBoard","renderCell","row","col","isBlack","cellColor","className","fileName","_jsxFileName","lineNumber","columnNumber","renderRow","cells","push","children","renderNotation","letters","renderChessboard","rows","_c","$RefreshReg$"],"sources":["/Users/alinakravcuk/Desktop/React Projects and Examples/Labs/Lab_1/task3/src/Components/ChessBoard.jsx"],"sourcesContent":["import React from \"react\";\nimport \"./ChessBoardStyle.css\";\n\nconst ChessBoard = () => {\n    const renderCell = (row, col) => {\n        const isBlack = (row + col) % 2 === 1;\n        const cellColor = isBlack ? \"black\" : \"white\";\n\n        return (\n            <td className={`cell ${cellColor}`}>\n            </td>\n        );\n    };\n\n    const renderRow = (row) => {\n        const cells = [];\n        for (let col = 0; col < 8; col++) {\n            cells.push(renderCell(row, col));\n        }\n        return <tr className=\"row\">{cells}</tr>;\n    };\n\n    const renderNotation = () => {\n        const letters = [\" \",\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \" \"];\n        const cells = [];\n        for (let col = 0; col < 10; col++) {\n            cells.push(<th className={`notation`}>{letters[col]}\n            </th>);\n        }\n        return <tr className=\"row-notatian\">{cells}</tr>;\n    }\n\n    const renderChessboard = () => {\n        const rows = [];\n\n        rows.push(renderNotation());\n        for (let row = 0; row < 8; row++) {\n            rows.push(renderRow(row));\n        }\n        rows.push(renderNotation());\n        return rows;\n    };\n\n    return (\n        <div>\n            <table className=\"chessboard\">\n                {renderChessboard()}\n            </table>\n        </div>\n    );\n};\n\nexport default ChessBoard;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACrB,MAAMC,UAAU,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC7B,MAAMC,OAAO,GAAG,CAACF,GAAG,GAAGC,GAAG,IAAI,CAAC,KAAK,CAAC;IACrC,MAAME,SAAS,GAAGD,OAAO,GAAG,OAAO,GAAG,OAAO;IAE7C,oBACIL,OAAA;MAAIO,SAAS,EAAG,QAAOD,SAAU;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAEb,CAAC;EAED,MAAMC,SAAS,GAAIT,GAAG,IAAK;IACvB,MAAMU,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIT,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAC9BS,KAAK,CAACC,IAAI,CAACZ,UAAU,CAACC,GAAG,EAAEC,GAAG,CAAC,CAAC;IACpC;IACA,oBAAOJ,OAAA;MAAIO,SAAS,EAAC,KAAK;MAAAQ,QAAA,EAAEF;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC3C,CAAC;EAED,MAAMK,cAAc,GAAGA,CAAA,KAAM;IACzB,MAAMC,OAAO,GAAG,CAAC,GAAG,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACjE,MAAMJ,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIT,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;MAC/BS,KAAK,CAACC,IAAI,eAACd,OAAA;QAAIO,SAAS,EAAG,UAAU;QAAAQ,QAAA,EAAEE,OAAO,CAACb,GAAG;MAAC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,CAAC;IACV;IACA,oBAAOX,OAAA;MAAIO,SAAS,EAAC,cAAc;MAAAQ,QAAA,EAAEF;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACpD,CAAC;EAED,MAAMO,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,MAAMC,IAAI,GAAG,EAAE;IAEfA,IAAI,CAACL,IAAI,CAACE,cAAc,CAAC,CAAC,CAAC;IAC3B,KAAK,IAAIb,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAC9BgB,IAAI,CAACL,IAAI,CAACF,SAAS,CAACT,GAAG,CAAC,CAAC;IAC7B;IACAgB,IAAI,CAACL,IAAI,CAACE,cAAc,CAAC,CAAC,CAAC;IAC3B,OAAOG,IAAI;EACf,CAAC;EAED,oBACInB,OAAA;IAAAe,QAAA,eACIf,OAAA;MAAOO,SAAS,EAAC,YAAY;MAAAQ,QAAA,EACxBG,gBAAgB,CAAC;IAAC;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;AAACS,EAAA,GA/CInB,UAAU;AAiDhB,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}